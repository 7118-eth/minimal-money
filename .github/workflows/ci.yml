name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION_STABLE: '1.23'
  
jobs:
  # Quick format and vet checks
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION_STABLE }}
        cache: true
    
    - name: Check formatting
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "Go code is not formatted:"
          gofmt -d .
          exit 1
        fi
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run go mod tidy check
      run: |
        go mod tidy
        git diff --exit-code go.mod go.sum

  # Fast tests on multiple Go versions and OS
  test-fast:
    name: Fast Tests (Go ${{ matrix.go-version }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        go-version: ['1.21', '1.22', '1.23']
        os: [ubuntu-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
    
    - name: Install dependencies
      run: make deps
    
    - name: Run fast tests
      run: make test-fast
    
    - name: Run tests with race detector
      if: matrix.go-version == env.GO_VERSION_STABLE
      run: make test-race

  # Full API tests - only on one combination to avoid rate limits
  test-full:
    name: Full API Tests
    runs-on: ubuntu-latest
    needs: [lint, test-fast]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION_STABLE }}
        cache: true
    
    - name: Install dependencies
      run: make deps
    
    - name: Run all tests with coverage
      run: make test-coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload coverage HTML
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.html

  # Build binaries for multiple platforms
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test-fast]
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION_STABLE }}
        cache: true
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        output_name="minimal-money-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          output_name="${output_name}.exe"
        fi
        go build -o "${output_name}" -ldflags="-s -w" cmd/budget/main.go
    
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: minimal-money-${{ matrix.goos }}-${{ matrix.goarch }}
        path: minimal-money-*

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [lint]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION_STABLE }}
        cache: true
    
    - name: Run go mod audit
      run: go list -json -m all | nancy sleuth
      continue-on-error: true
    
    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...
      continue-on-error: true