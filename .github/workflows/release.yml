name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for changelog generation
    
    - name: Generate Changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # Generate changelog
        echo "## What's Changed" > changelog.md
        echo "" >> changelog.md
        
        if [ -z "$PREV_TAG" ]; then
          echo "This is the first release!" >> changelog.md
        else
          # Group commits by type
          echo "### Features" >> changelog.md
          git log $PREV_TAG..HEAD --pretty=format:"* %s (%an)" --grep="^feat" >> changelog.md || true
          echo "" >> changelog.md
          
          echo "### Bug Fixes" >> changelog.md
          git log $PREV_TAG..HEAD --pretty=format:"* %s (%an)" --grep="^fix" >> changelog.md || true
          echo "" >> changelog.md
          
          echo "### Other Changes" >> changelog.md
          git log $PREV_TAG..HEAD --pretty=format:"* %s (%an)" --grep="^feat" --grep="^fix" --invert-grep >> changelog.md || true
          echo "" >> changelog.md
        fi
        
        echo "### Installation" >> changelog.md
        echo "" >> changelog.md
        echo "Download the appropriate binary for your platform below and make it executable:" >> changelog.md
        echo "" >> changelog.md
        echo '```bash' >> changelog.md
        echo 'chmod +x minimal-money-*' >> changelog.md
        echo './minimal-money-*' >> changelog.md
        echo '```' >> changelog.md
        echo "" >> changelog.md
        echo "### Checksums" >> changelog.md
        echo "" >> changelog.md
        echo "Each binary has its own .sha256 checksum file in the release assets." >> changelog.md
        
        # Save changelog to environment
        {
          echo 'CHANGELOG<<EOF'
          cat changelog.md
          echo EOF
        } >> $GITHUB_ENV
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: ${{ env.CHANGELOG }}
        draft: false
        prerelease: false

  build-release:
    name: Build Release Binary
    needs: release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            binary_name: minimal-money
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            binary_name: minimal-money
          - os: macos-latest
            goos: darwin
            goarch: amd64
            binary_name: minimal-money
          - os: macos-latest
            goos: darwin
            goarch: arm64
            binary_name: minimal-money
          - os: windows-latest
            goos: windows
            goarch: amd64
            binary_name: minimal-money.exe
          - os: windows-latest
            goos: windows
            goarch: arm64
            binary_name: minimal-money.exe
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true
    
    - name: Get version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
      run: |
        # For cross-compilation of CGO, we need to handle it differently
        if [ "${{ matrix.goos }}" = "linux" ] && [ "${{ matrix.goarch }}" = "arm64" ] && [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          export CC=aarch64-linux-gnu-gcc
        fi
        
        # Windows doesn't support CGO with SQLite easily, so we disable it
        if [ "${{ matrix.goos }}" = "windows" ]; then
          export CGO_ENABLED=0
        fi
        
        output_name="${{ matrix.binary_name }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          output_name="${output_name%.exe}"  # Remove .exe for consistent naming
        fi
        # Get commit hash and date
        COMMIT_HASH=$(git rev-parse --short HEAD)
        BUILD_DATE=$(date -u '+%Y-%m-%d_%H:%M:%S')
        
        go build -o "${output_name}" -ldflags="-s -w -X main.version=${{ steps.get_version.outputs.VERSION }} -X main.commit=$COMMIT_HASH -X main.date=$BUILD_DATE" cmd/budget/main.go
        
        # Create archive
        if [ "${{ matrix.goos }}" = "windows" ]; then
          archive_name="${output_name}.zip"
          zip "${archive_name}" "${output_name}"
        else
          archive_name="${output_name}.tar.gz"
          tar czf "${archive_name}" "${output_name}"
        fi
        
        # Calculate checksum
        if [ "${{ matrix.goos }}" = "darwin" ]; then
          shasum -a 256 "${archive_name}" > "${archive_name}.sha256"
        else
          sha256sum "${archive_name}" > "${archive_name}.sha256"
        fi
        
        # Set environment variable for upload steps
        echo "ASSET_NAME=${archive_name}" >> $GITHUB_ENV
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ./${{ env.ASSET_NAME }}
        asset_name: ${{ env.ASSET_NAME }}
        asset_content_type: application/octet-stream
    
    - name: Upload Checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ./${{ env.ASSET_NAME }}.sha256
        asset_name: ${{ env.ASSET_NAME }}.sha256
        asset_content_type: text/plain